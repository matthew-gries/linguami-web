// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// NextAuth Schema

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  refresh_token_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String? @db.Text
  age           Int?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Schema for Conversations and Chats

model Conversation {
  id            String  @id @default(cuid())
  userId        String
  title         String
  targetLanguage String // ISO 639.2 lang code, the language the conversation is in
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats         Chat[]
}

model Chat {
  id            String @id @default(cuid())
  conversationId String
  senderId      String // Determined by application logic
  ordinal       Int    // Determined by application logic
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  chatTexts     ChatText[]
}

model ChatText {
  id            String @id @default(cuid())
  chatId        String
  ordinal       Int // Determined by application logic
  text          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  chat          Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

